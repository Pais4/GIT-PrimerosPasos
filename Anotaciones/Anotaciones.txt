-> Los 3 estados de GIT
    - Working Directory: Es donde trabajamos de manera local, pero
    para guardarlo hay que pasarlo al Staging Area.
    - Staging Area: Es el area de preparacion, se almacena
    justo antes de hacer el commit
    - Git Repository: El repositorio donde almacenaremos los 
    cambios del proyecto.

-> Comandos para la terminal
    - mkdir: Crear carpeta
    - touch: Crear archivos
    - rm: Remover un archivo 
    - rm -rf: Remover folder
    - vim: Sirve para editar archivos desde la terminal
        - Para cerrar y guardar (Esc) + :wq (Write & quit)
        - :q! Para salir sin guardar

-> Creando el primer repositorio
    - git init o git init nombre_carpeta 
    - git status
        - Muestra todos los archivos que estan en el working directory (untracked)

-> Subiendo el archivo al Staging area
    - git add nombreArchivo o git add .
        - git add -A (all -> Todos los archivos sin importar en que ubicacion se este, que esten listos para ser agregados)
    - git rm --cached archivo (Sirve para borrar algun archivo que se haya añadido al staging area)
    - git rm -f archivo (Realiza un borrado forzoso de algun archivo que se haya añadido al staging)
    - git commit -m "mensaje" 
    - git commit --amend (opcional->) -m "mensaje" (Nos ayuda a concatenar un cambio con uno previo del mismo commit, la parte del mensaje es opcional)
        - :wq
    
-> Etiquetas - TAG
    - git tag -a 0.5 -m "Version estable" (Para agregar un tag con mensaje)
    - git tag -l (Para listar los tags)
    - git tag 1.2 SHA-1-de-version-anterior-o-posterior (Ej: 9e1f207ece162208f8d77fdcd3bb90293913c8e0) (Para ponerle un tag a una version que no tenia)
    - git tag -d 1.0 (Borra el tag)
    - git tag -f -a 0.1 -m "Iniciando el proyecto" 9e1f207ece162208f8d77fdcd3bb90293913c8e0 (Sirve para modificar y renombrar la version)

-> Trabajando con RAMAS
    - git checkout -b nombreRama (Creamos una rama y navegamos a ella de una vez)
    - git checkout nombreRama (Con este nos movemos a la rama)
    - git branch nombre (Crear la rama)
    - git branch -l (Lista las ramas)
    - git branch -d nombre (Elimina una rama)
        - git branch -D nombre (Forzar el borrado del repositorio)
    - git branch -m nombreViejo nombreNuevo (Renombrar una rama)

-> MERGE entre ramas
    - Estando ubicados en la rama master
        - Primer merge -> git merge rama (Mezclamos la master con la rama que queramos)
        - Merge recursivo -> Nos obliga a hacer un commit y salimos :q
        - Merge con conflictos -> Tenemos que arreglar manualmente lo que necesitamos y lo que no
        y ya hacemos el commit para que el merge se ejecute.
    - git rebase rama (Hace lo mismo que el merge solo que no crea bifurcaciones, commits innecesarios, pero es mas riesgoso)

-> STASH -> Estado intermedio, es otro limbo como el stage
    - git stash
        (Usamos el stash si estamos trabajando en una rama y necesitamos pasar a otra para hacer 
        un hotfix o algo por el estilo, pero no queremos pasar lo que tenemos ahora ni hacer un commit, 
        lo que tengamos queda guardado temporalmente sin necesidad de subirlo)
    - git stash list (Podemos ver los stash que tenemos)
    - git stash drop stash@{1} (Elimina un stash)
    - git stash apply (Con esto aplicamos el ultimo cambio que hayamos realizado)
        - git stash apply stash@{2} (Aplicamos un cambio en especifico)

-> CHERRY PICK - Escogiendo commits selectivamente para sacarlos de algun lugar
    - Este comando nos ayuda a sacar un commit en especifico de una rama y ponerlo en 
    la rama que lo necesitemos.
    - git checkout -b hotfix2
        - (Aqui pasamos el commit que necesitamos)
    - git cherry-pick sha-1
    - Con esto ya sacamos el commit de una rama y lo pusimos en la que lo necesitabamos

-> Seguimiento de los repositorios
    - git log (Informacion sobre el repositorio)
        - Personalizando el log
            - git log --oneline
            - git log --oneline --graph
    - git diff 1.0 1.1(Muestra las diferencias que ocurrieron entre un cambio u otro)
        - o tambien git diff 8297453
    - git checkout firma -> Sirve para cambiar a algun estado del pasado
    - git remote -v (ver que repositorio esta asociado)

-> Para hacer un reset
    - git reset --soft sha-1  (Elimina los cambios hasta el staging area)
    - git reset --mixed sha-1 (Quita los commit y los archivos que estaban en el commit del stage)
    - git reset --hard sha-1
